/*
Ninja is learning the binary representation of the numbers. He wanted to practice the
topic, so he picked a question. The problem statement says, two numbers, 'A' and 'B'
are given. Find the number of bits of 'B' that should be flipped to convert it into 'A'.Can
you help Ninja to solve this problem?
You are given two integers, 'A' and 'B'.Find the number of bits of 'Bt that should be
flipped to convert it into 'A'.
For Example:
If 'A' is 13(1101) and 'B' is 7 (0111), The number of bits that should
be flipped is 20111).

Input Format:
The first line of the input contains an integer,'T',denoting the number of test cases.

Output Format:
The first line of each test case contains two integers,'A' and 'B'.

Note:
You do not need to print anything. It has already been taken care of.
Just implement the given function.

Constraints:
1<= T <= 10
1<= 'A','B' <= 10

Sample Input 1:
2
13 7
15 20

Sample Output 1:
2
4

Explanation of Smaple Input:
For the first test case,
The binary representation of 13 is 1101.
The binary representation of 7 is 0111.
So, we will change the 2nd and the 4th bit from the right to convert B into A.
Hence, the answer is 2. 
For the second test case:
The binary representation of 20 is 10100.
The binary representation of 15 is 01111.
So, we will change the 1st,2nd,4th, and 5th bit from the right to convert B into A.
Hence, the answer is 4. 

Smaple Input 2:
2
3 10
6 4

Sample Output 2:
2
1
*/

#include <bits/stdc++.h> 
int numberOfFlips(int a, int b)
{
    int xorResult = a^b;
    int count = 0;
    while(xorResult!=0){
        if(xorResult & 1){
            count++;
        }
        xorResult = xorResult>>1;
    }
    return count;
}
